{"version":3,"sources":["types.ts","assets/hb-logo.svg","components/navigation/Navigation.tsx","components/submit-link/SubmitLink.tsx","contexts/PostsContext.tsx","components/post/Post.tsx","components/sort-dropdown/SortDropdown.tsx","components/pagination/Pagination.tsx","containers/posts-container/PostsContainer.tsx","containers/submit-form-container/SubmitFormContainer.tsx","pages/home/Home.tsx","pages/submit/Submit.tsx","pages/not-found/NotFound.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchParams","Navigation","Container","data-testid","className","Col","to","Image","alt","src","logo","SubmitLink","Button","variant","size","PostsContext","createContext","initialPosts","timestamp","name","url","votes","PostsProvider","props","history","useHistory","useState","JSON","parse","localStorage","getItem","stringify","posts","setPosts","filteredPosts","setFilteredPosts","perPage","sortBy","searchParams","URLSearchParams","location","search","sortParam","get","pageParam","Number","_posts","slice","asc","sort","a","b","desc","setItem","useEffect","listen","Provider","value","handleClickDeletePost","filter","post","length","set","String","push","pathname","toString","handleClickUpvote","map","handleClickDownvote","children","usePosts","context","useContext","undefined","Error","Post","addToast","useToasts","isModalShown","setModalShown","handleCloseModal","Card","Body","Title","Text","onClick","Modal","show","onHide","Header","closeButton","Footer","appearance","autoDismiss","SortDropdown","sortTypes","selected","setSelected","handleClickDropdown","Dropdown","Toggle","Menu","Item","active","Pagination","params","activePage","setActivePage","totalPageCount","Math","ceil","pageNumbers","i","handleClickPage","page","Prev","index","Next","PostsContainer","SubmitFormContainer","setName","setUrl","validated","setValidated","Form","noValidate","onSubmit","e","preventDefault","currentTarget","checkValidity","stopPropagation","Date","now","Group","controlId","Label","Control","onChange","target","type","placeholder","minLength","maxLength","required","Feedback","Home","Submit","NotFound","App","autoDismissTimeout","placement","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.985ed5dc.chunk.js","sourcesContent":["/* istanbul ignore file */\nexport type ContextProps = {\n  children:\n    | boolean\n    | React.ReactChild\n    | React.ReactFragment\n    | React.ReactPortal\n    | null\n    | undefined;\n};\n\nexport type Post = {\n  name: string;\n  url: string;\n  votes: number;\n  timestamp: number;\n};\n\nexport enum SearchParams {\n  asc = \"asc\",\n  desc = \"desc\",\n  page = \"page\",\n}\n","export default __webpack_public_path__ + \"static/media/hb-logo.7eb8d2fa.svg\";","import { Container, Col, Image } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"../../assets/hb-logo.svg\";\n\nexport const Navigation = () => {\n  return (\n    <Container\n      data-testid=\"navigation-container\"\n      className=\"navigation-container py-3 px-0 d-flex align-items-center justify-content-between border-bottom\"\n    >\n      <Col>\n        <Link data-testid=\"navigation-home-link\" to=\"/\">\n          <Image data-testid=\"navigation-logo\" alt=\"Hepsiburada Logo\" src={logo} />\n        </Link>\n      </Col>\n      <Col data-testid=\"navigation-right\" className=\"navigation-text text-right\">\n        <span>Link</span>\n        <span>VOTE</span>\n        <span> Challenge</span>\n      </Col>\n    </Container>\n  );\n};\n","import { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport { PlusSquare } from \"react-bootstrap-icons\";\n\nexport const SubmitLink = () => {\n  return (\n    <div data-testid=\"submit-link-wrapper\" className=\"submit-link-button pb-4\">\n      <Link data-testid=\"submit-link\" to=\"/submit\">\n        <Button\n          data-testid=\"submit-link-button\"\n          className=\"w-100 py-1 clearfix\"\n          variant=\"outline-primary\"\n          size=\"lg\"\n        >\n          <PlusSquare data-testid=\"submit-link-button-icon\" />\n          <span>Submit Link</span>\n        </Button>\n      </Link>\n    </div>\n  );\n};\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ContextProps, Post, SearchParams } from \"../types\";\n\nexport const PostsContext = createContext({} as any);\n\nexport const initialPosts = [\n  { timestamp: 1, name: \"reddit\", url: \"https://reddit.com\", votes: 2 },\n  { timestamp: 2, name: \"google\", url: \"https://google.com\", votes: 1 },\n  { timestamp: 3, name: \"twitter\", url: \"https://twitter.com\", votes: 2 },\n  { timestamp: 4, name: \"facebook\", url: \"https://facebook.com\", votes: -5 },\n  { timestamp: 5, name: \"github\", url: \"https://github.com\", votes: 3 },\n  { timestamp: 6, name: \"codepen\", url: \"https://codepen.com\", votes: 2 },\n];\n\nexport const PostsProvider = (props: ContextProps) => {\n  // We will use history for storing sorting and pagination mechanism.\n  // We will also listen history changes to change sorting and pagination.\n  const history = useHistory();\n\n  // Posts are initially read from localStorage, if not it is [].\n  const [posts, setPosts] = useState(\n    JSON.parse(\n      localStorage.getItem(\"posts\") || JSON.stringify(initialPosts)\n    ) as Post[]\n  );\n\n  // FilteredPosts are modified Posts accordingly history location search params.\n  const [filteredPosts, setFilteredPosts] = useState([] as Post[]);\n\n  // PerPage is the number of posts within a page.\n  const [perPage] = useState(5);\n\n  // sortBy method will sort and paginate by history location search params,\n  // It will use actual posts array and set this into filteredPosts array.\n  const sortBy = () => {\n    // Reading history location to extract search params to decide sorting and paging choice.\n    const searchParams = new URLSearchParams(history.location.search);\n    const sortParam = searchParams.get(\"sort\");\n    const pageParam = Number(searchParams.get(\"page\")) || 1;\n\n    // To keep this state immutable.\n    let _posts = posts.slice();\n\n    // Sorting algorithm according to the sort search param.\n    if (sortParam === SearchParams.asc) {\n      _posts.sort((a, b) => a.votes - b.votes || b.timestamp - a.timestamp);\n    } else if (sortParam === SearchParams.desc) {\n      _posts.sort((a, b) => b.votes - a.votes || b.timestamp - a.timestamp);\n    } else {\n      _posts.sort((a, b) => b.timestamp - a.timestamp);\n    }\n\n    // Pagination algorithm also reads page param from history location and sliceses the posts array.\n    _posts = _posts.slice(pageParam * perPage - perPage, pageParam * perPage);\n    setFilteredPosts(_posts);\n    localStorage.setItem(\"posts\", JSON.stringify(posts));\n  };\n\n  // It handles the click delete on post.\n  const handleClickDeletePost = (timestamp: number) => {\n    // Deletes the selected post by its timestamp.\n    let _posts = posts.filter((post) => post.timestamp !== timestamp);\n    setPosts(_posts);\n\n    /*\n      In case of the deletion of last element on a page,\n      we have to redirect the user to the previous page.\n    */\n    const searchParams = new URLSearchParams(history.location.search);\n    const pageParam = Number(searchParams.get(\"page\"));\n\n    // Calculates the amount of posts on the active page(read from history).\n    _posts = _posts.slice(pageParam * perPage - perPage, pageParam * perPage);\n\n    if (_posts.length === 0 && pageParam > 1) {\n      searchParams.set(\"page\", String(pageParam - 1));\n      history.push({ pathname: \"/\", search: searchParams.toString() });\n    }\n  };\n\n  const handleClickUpvote = (timestamp: number) => {\n    setPosts(\n      posts.map((post) => {\n        if (post.timestamp === timestamp) {\n          post.votes++;\n        }\n        return post;\n      })\n    );\n  };\n\n  const handleClickDownvote = (timestamp: number) => {\n    setPosts(\n      posts.map((post) => {\n        if (post.timestamp === timestamp) {\n          post.votes--;\n        }\n        return post;\n      })\n    );\n  };\n\n  // Applies effects on every posts changes or history changes.\n  // Also cleans the history listener on component will unmount to avoid multiple register listeners(sortBy).\n  useEffect(() => {\n    sortBy();\n    return history.listen(sortBy)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [posts]);\n\n  return (\n    <PostsContext.Provider\n      value={{\n        posts,\n        setPosts,\n        filteredPosts,\n        perPage,\n        handleClickDeletePost,\n        handleClickUpvote,\n        handleClickDownvote,\n      }}\n    >\n      {props.children}\n    </PostsContext.Provider>\n  );\n};\n\nexport const usePosts = () => {\n  const context = useContext(PostsContext);\n  /* istanbul ignore if */\n  if (context === undefined) {\n    throw new Error(\"usePosts must be used within a PostsProvider\");\n  }\n  return context;\n};\n","import { Card, Button, Modal } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport { ArrowUp, ArrowDown, DashCircleFill } from \"react-bootstrap-icons\";\nimport { usePosts } from \"../../contexts\";\nimport { Post as PostType } from \"../../types\";\nimport { useToasts } from \"react-toast-notifications\";\n\nexport const Post = ({ timestamp, votes, name, url }: PostType) => {\n  const { handleClickDeletePost, handleClickUpvote, handleClickDownvote } =\n    usePosts();\n  const { addToast } = useToasts();\n\n  const handleClickDelete = () => {\n    handleClickDeletePost(timestamp);\n    setModalShown(false);\n    addToast(`${name} REMOVED`, {\n      appearance: \"success\",\n      autoDismiss: true,\n    });\n  };\n\n  const [isModalShown, setModalShown] = useState(false);\n\n  const handleCloseModal = () => setModalShown(false);\n\n  return (\n    <>\n      <Card\n        data-testid=\"post-container\"\n        className=\"mt-2 border post-container d-flex flex-row p-3\"\n      >\n        <div\n          data-testid=\"post-votes-container\"\n          className=\"py-1 px-2 votes-container d-flex flex-column align-items-center justify-content-center border rounded\"\n        >\n          <p className=\"m-0 h3 font-weight-bolder\">{votes}</p>\n          <p className=\"m-0\">POINTS</p>\n        </div>\n        <Card.Body className=\"py-0\">\n          <Card.Title data-testid=\"post-name\" className=\"mb-1\">\n            {name}\n          </Card.Title>\n          <Card.Text data-testid=\"post-url\">({url})</Card.Text>\n          <div className=\"d-flex flex-row justify-content-between align-items-center\">\n            <button\n              data-testid=\"post-upvote-button\"\n              onClick={() => handleClickUpvote(timestamp)}\n              className=\"vote-button text-secondary border-0 bg-transparent\"\n            >\n              <ArrowUp />\n              <span>Up Vote</span>\n            </button>\n            <button\n              data-testid=\"post-downvote-button\"\n              onClick={() => handleClickDownvote(timestamp)}\n              className=\"vote-button text-secondary border-0 bg-transparent  \"\n            >\n              <ArrowDown />\n              <span>Down Vote</span>\n            </button>\n          </div>\n        </Card.Body>\n        <DashCircleFill\n          data-testid=\"post-delete-button\"\n          onClick={() => setModalShown(true)}\n          className=\"remove-icon text-danger\"\n        />\n      </Card>\n      <Modal\n        data-testid=\"post-modal\"\n        show={isModalShown}\n        onHide={handleCloseModal}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title data-testid=\"post-modal-title\">Remove Link</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body data-testid=\"post-modal-body\">\n          <p>Do you want to remove:</p>\n          <h3>{name}</h3>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button\n            data-testid=\"post-modal-button-close\"\n            onClick={handleCloseModal}\n            variant=\"secondary\"\n          >\n            No\n          </Button>\n          <Button\n            data-testid=\"post-modal-button-delete\"\n            onClick={handleClickDelete}\n            variant=\"primary\"\n          >\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n","import { Dropdown } from \"react-bootstrap\";\nimport { ArrowRight } from \"react-bootstrap-icons\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport { SearchParams } from \"../../types\";\n\nexport const SortDropdown = () => {\n  const history = useHistory();\n  const sortTypes = {\n    [SearchParams.asc]: (\n      <>\n        Less Voted (A <ArrowRight /> Z)\n      </>\n    ),\n    [SearchParams.desc]: (\n      <>\n        Most Voted (Z <ArrowRight /> A)\n      </>\n    ),\n    orderby: \"Order By\",\n  };\n\n  // Sort query value is read from history and set into state as selected sort type.\n  const params = new URLSearchParams(history.location.search);\n  const sortParam = params.get(\"sort\");\n\n  // Selected state is to be used on active state of dropdown items.\n  const [selected, setSelected] = useState(sortParam || \"orderby\");\n\n  // When dropdown gets click it changes selected sort.\n  // It also pushes as a search parameter into history.\n  const handleClickDropdown = (value: keyof typeof sortTypes) => {\n    setSelected(value);\n    history.push({ search: `?sort=${value}` });\n  };\n\n  return (\n    <>\n      <Dropdown data-testid=\"dropdown-wrapper\" className=\"w-50 mt-4\">\n        <Dropdown.Toggle\n          data-testid=\"dropdown-selected\"\n          className=\"w-100 border text-left d-flex align-items-center justify-content-between text-capitalize bg-transparent text-secondary\"\n        >\n          {sortTypes[selected as keyof typeof sortTypes]}\n        </Dropdown.Toggle>\n        <Dropdown.Menu className=\"w-100\">\n          <Dropdown.Item\n            data-testid=\"dropdown-item-orderby\"\n            active={\"orderby\" === selected}\n            className=\"text-capitalize\"\n            onClick={() => handleClickDropdown(\"orderby\")}\n          >\n            Order By\n          </Dropdown.Item>\n\n          <Dropdown.Item\n            data-testid=\"dropdown-item-desc\"\n            active={SearchParams.desc === selected}\n            className=\"text-capitalize\"\n            onClick={() => handleClickDropdown(SearchParams.desc)}\n          >\n            Most Voted (Z <ArrowRight /> A)\n          </Dropdown.Item>\n          <Dropdown.Item\n            data-testid=\"dropdown-item-asc\"\n            active={SearchParams.asc === selected}\n            className=\"text-capitalize\"\n            onClick={() => handleClickDropdown(SearchParams.asc)}\n          >\n            Less Voted (A <ArrowRight /> Z)\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n","import { Pagination as BPagination } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { usePosts } from \"../../contexts\";\n\nexport const Pagination = () => {\n  // Pagination component should know how many pages there will be,\n  // and it should render pagination items accordingly.\n  const history = useHistory();\n  const { posts, perPage } = usePosts();\n\n  // Storing the active page number in state which is read from history.\n  // Set to 1 if history doesn't have that parameter.\n  const params = new URLSearchParams(history.location.search);\n  const [activePage, setActivePage] = useState(Number(params.get(\"page\") || 1));\n\n  // Calculates the total page number with given perPage post amount.\n  const totalPageCount = Math.ceil(posts.length / perPage);\n  // Filling up the pagination array.\n  const pageNumbers = [];\n  for (let i = 1; i <= totalPageCount; i++) {\n    pageNumbers.push(i);\n  }\n\n  // Adds the page parameter into search parameters\n  const handleClickPage = (page: number) => {\n    const params = new URLSearchParams(history.location.search);\n    params.set(\"page\", String(page));\n    history.push({ pathname: \"/\", search: params.toString() });\n  };\n\n  // Active page is set, when history gets changed(e.g. sort params changes)\n  useEffect(() => {\n    return history.listen(() => {\n      const params = new URLSearchParams(history.location.search);\n      setActivePage(Number(params.get(\"page\")) || 1);\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  // When there is no page, pagination will not render.\n  /* istanbul ignore if */\n  if (pageNumbers.length === 0) {\n    return null;\n  }\n  return (\n    <BPagination\n      data-testid=\"pagination-wrapper\"\n      className=\"mt-3 d-flex flex-row justify-content-center\"\n    >\n      {activePage > 1 && (\n        <BPagination.Prev\n          data-testid=\"pagination-previous\"\n          onClick={() => handleClickPage(activePage - 1)}\n        />\n      )}\n\n      {pageNumbers.map((page, index) => {\n        /* istanbul ignore next */\n        return (\n          <BPagination.Item\n            data-testid=\"pagination-item\"\n            active={page === activePage}\n            key={page}\n            onClick={() => handleClickPage(page)}\n          >\n            {page}\n          </BPagination.Item>\n        );\n      })}\n      {activePage < pageNumbers.length && (\n        <BPagination.Next\n          data-testid=\"pagination-next\"\n          onClick={() => handleClickPage(activePage + 1)}\n        />\n      )}\n    </BPagination>\n  );\n};\n","import { SortDropdown, Post, Pagination } from \"../../components\";\nimport { usePosts } from \"../../contexts\";\nimport { Post as PostType } from \"../../types\";\n\nexport const PostsContainer = () => {\n  const { filteredPosts } = usePosts();\n\n  return (\n    <>\n      <SortDropdown />\n      {filteredPosts.map((post: PostType) => (\n        <Post key={post.timestamp} {...post} />\n      ))}\n      <Pagination />\n    </>\n  );\n};\n","import { Form, Button } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport { usePosts } from \"../../contexts\";\nimport { useToasts } from \"react-toast-notifications\";\n\nexport const SubmitFormContainer = () => {\n  // We want to take url and name from form and place them into PostsContext\n  // post example: { timestamp: 1, name: \"reddit\", url: \"https://reddit.com\", vote: 0 }\n  const { posts, setPosts } = usePosts();\n  const [name, setName] = useState(\"\");\n  const [url, setUrl] = useState(\"\");\n  // setValidated function checks validity of inputs if true.\n  const [validated, setValidated] = useState(false);\n  const { addToast } = useToasts();\n\n  const addPost = (e: any) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setValidated(true);\n      return;\n    }\n    setValidated(false);\n    setPosts([...posts, { timestamp: Date.now(), name, url, votes: 0 }]);\n    setName(\"\");\n    setUrl(\"\");\n    addToast(`${name} ADDED`, {\n      appearance: 'success',\n      autoDismiss: true,\n    })\n  };\n\n  const updateName = (e: any) => {\n    setName(e.target.value);\n  };\n  const updateUrl = (e: any) => {\n    setUrl(e.target.value);\n  };\n\n  return (\n    <>\n      <Form\n        data-testid=\"form-container\"\n        className=\"clearfix\"\n        noValidate\n        validated={validated}\n        onSubmit={addPost}\n      >\n        <h2 className=\"my-4\">Add a new link</h2>\n        <Form.Group className=\"mb-3\" controlId=\"\">\n          <Form.Label>Link Name</Form.Label>\n          <Form.Control\n            data-testid=\"form-control-name\"\n            value={name}\n            onChange={updateName}\n            type=\"text\"\n            placeholder=\"Link Name\"\n            minLength={2}\n            maxLength={100}\n            required\n          />\n          <Form.Control.Feedback data-testid=\"name-invalid\" type=\"invalid\">\n            Please enter a link name.\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Link URL</Form.Label>\n          <Form.Control\n            data-testid=\"form-control-url\"\n            value={url}\n            onChange={updateUrl}\n            type=\"url\"\n            placeholder=\"Link URL\"\n            required\n          />\n          <Form.Control.Feedback data-testid=\"url-invalid\" type=\"invalid\">\n            Please enter a url.\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          data-testid=\"form-submit-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          size=\"lg\"\n          className=\"float-right\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n","import { SubmitLink } from \"../../components\";\nimport { PostsContainer } from \"../../containers\";\n\nexport const Home = () => {\n  return (\n    <div data-testid=\"home\" className=\"page-wrapper mt-5\">\n      <SubmitLink />\n      <PostsContainer />\n    </div>\n  );\n};\n","import { SubmitFormContainer } from \"../../containers\";\nimport { Link } from \"react-router-dom\";\nimport { ArrowLeft } from \"react-bootstrap-icons\";\n\nexport const Submit = () => {\n  return (\n    <div data-testid=\"submit\" className=\"page-wrapper mt-3\">\n      <Link\n        data-testid=\"submit-link\"\n        to=\"/\"\n        className=\"d-flex align-items-center font-weight-bold\"\n      >\n        <ArrowLeft className=\"mr-2\" />\n        Return to list\n      </Link>\n      <SubmitFormContainer />\n    </div>\n  );\n};\n","export const NotFound = () => {\n  return(\n    <h1 data-testid=\"notfound\">404 not found</h1>\n  )\n};\n","import React from \"react\";\nimport { Navigation } from \"./components\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Home, NotFound, Submit } from \"./pages\";\nimport { PostsProvider } from \"./contexts/PostsContext\";\nimport { ToastProvider } from \"react-toast-notifications\";\n\nfunction App() {\n  return (\n    <div className=\"App pb-4 px-4\">\n      <BrowserRouter>\n        <Navigation />\n        <PostsProvider>\n          <ToastProvider\n            autoDismiss\n            autoDismissTimeout={3000}\n            placement=\"top-center\"\n          >\n            <Switch>\n              <Route path=\"/submit\">\n                <Submit />\n              </Route>\n              <Route path=\"/\" exact>\n                <Home />\n              </Route>\n              <Route component={NotFound} />\n            </Switch>\n          </ToastProvider>\n        </PostsProvider>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/* istanbul ignore file */\nimport { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* istanbul ignore file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles/index.scss\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}